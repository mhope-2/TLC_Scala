[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\MICHAE~1\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\MICHAE~1\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Amazon.com Inc. Java 16.0.2)
[debug]       Load.loadUnit: plugins took 103.0282ms
[debug]       Load.loadUnit: defsScala took 0.2404ms
[debug] [Loading] Scanning directory C:\Users\Michael Hope\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Michael Hope\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 12.6486 ms
[debug]           Load.resolveProject(global-plugins) took 34.7014ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Michael Hope\.sbt\1.0\plugins, plugins: List(<none>))) took 68.99ms
[debug] [Loading] Done in C:\Users\Michael Hope\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 92.8452ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2272ms
[debug]     Load.loadUnit(file:/C:/Users/Michael%20Hope/.sbt/1.0/plugins/, ...) took 205.2552ms
[debug]   Load.apply: load took 363.3933ms
[debug]   Load.apply: resolveProjects took 4.4345ms
[debug]   Load.apply: finalTransforms took 48.6298ms
[debug]   Load.apply: config.delegates took 8.8282ms
[debug]   Load.apply: Def.make(settings)... took 375.3953ms
[debug]   Load.apply: structureIndex took 87.0434ms
[debug]   Load.apply: mkStreams took 1.3946ms
[info] loading global plugins from C:\Users\Michael Hope\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2485.3143ms
[debug]           Load.loadUnit: plugins took 18.5487ms
[debug]           Load.loadUnit: defsScala took 0.0032ms
[debug] [Loading] Scanning directory C:\Users\Michael Hope\Documents\Java\scala_tlc\project
[debug]             Load.loadUnit: mkEval took 5.7799ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Michael Hope\Documents\Java\scala_tlc\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.2721 ms
[info] loading settings for project scala_tlc-build from idea1.sbt ...
[debug]               Load.resolveProject(scala_tlc-build) took 2.6294ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scala_tlc-build, base: C:\Users\Michael Hope\Documents\Java\scala_tlc\project, plugins: List(<none>))) took 4.3943ms
[debug] [Loading] Done in C:\Users\Michael Hope\Documents\Java\scala_tlc\project, returning: (scala_tlc-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 97.8318ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.3228ms
[debug]         Load.loadUnit(file:/C:/Users/Michael%20Hope/Documents/Java/scala_tlc/project/, ...) took 123.5468ms
[debug]       Load.apply: load took 125.0664ms
[debug]       Load.apply: resolveProjects took 0.1594ms
[debug]       Load.apply: finalTransforms took 10.041ms
[debug]       Load.apply: config.delegates took 0.354ms
[debug]       Load.apply: Def.make(settings)... took 62.3468ms
[debug]       Load.apply: structureIndex took 26.2744ms
[debug]       Load.apply: mkStreams took 0.0024ms
[info] loading project definition from C:\Users\Michael Hope\Documents\Java\scala_tlc\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 501.7849ms
[debug]     Load.loadUnit: defsScala took 0.0021ms
[debug] [Loading] Scanning directory C:\Users\Michael Hope\Documents\Java\scala_tlc
[debug]       Load.loadUnit: mkEval took 0.2816ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Michael Hope\Documents\Java\scala_tlc, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.59 ms
[info] loading settings for project scala_tlc from build.sbt ...
[debug]         Load.resolveProject(scala_tlc) took 19.5079ms
[debug]       Load.loadTransitive: finalizeProject(Project(id scala_tlc, base: C:\Users\Michael Hope\Documents\Java\scala_tlc, plugins: List(<none>))) took 22.0661ms
[debug] [Loading] Done in C:\Users\Michael Hope\Documents\Java\scala_tlc, returning: (scala_tlc)
[debug]     Load.loadUnit: loadedProjectsRaw took 1497.2406ms
[debug]     Load.loadUnit: cleanEvalClasses took 8.3237ms
[debug]   Load.loadUnit(file:/C:/Users/Michael%20Hope/Documents/Java/scala_tlc/, ...) took 2008.1225ms
[debug] Load.apply: load took 2009.6499ms
[debug] Load.apply: resolveProjects took 0.1802ms
[debug] Load.apply: finalTransforms took 18.828ms
[debug] Load.apply: config.delegates took 0.2542ms
[debug] Load.apply: Def.make(settings)... took 57.8732ms
[debug] Load.apply: structureIndex took 19.6644ms
[debug] Load.apply: mkStreams took 0.0029ms
[info] set current project to scala_tlc (in build file:/C:/Users/Michael%20Hope/Documents/Java/scala_tlc/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 54132 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 54132, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to scala_tlc (in build file:/C:/Users/Michael%20Hope/Documents/Java/scala_tlc/)
[debug] > Exec(idea-shell, None, None)
